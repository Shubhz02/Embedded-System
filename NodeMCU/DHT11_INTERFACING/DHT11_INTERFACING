Introduction
This project demonstrates how to interface the DHT sensor (a popular temperature and humidity sensor) with the NodeMCU (ESP8266).
The DHT sensor is widely used in environmental monitoring projects where both temperature and humidity are critical parameters.
This project reads the humidity and temperature values from the DHT sensor and outputs the results to the Serial Monitor in both Celsius and Fahrenheit.

Working Principle
The DHT sensor communicates with the NodeMCU via a single-wire interface. In this example, the D1 pin (GPIO5) is used to communicate with the sensor.
The DHT sensor can read both temperature and humidity values, which are then converted into readable formats and sent to the Serial Monitor.

Temperature and Humidity Values:
The sensor's temperature reading is captured in Celsius and can also be converted to Fahrenheit.
The humidity is read in percentage (0 to 100%).
The program works by periodically sampling the sensor data using the dht.getHumidity() and dht.getTemperature() functions.
The results are displayed in a tabular format on the Serial Monitor, with the communication status included to verify if the data was successfully transmitted.

Connections
To interface the DHT sensor with the NodeMCU, the wiring is as follows:
DHT Pin	NodeMCU Pin
VCC	3.3V
GND	GND
DATA	D1 (GPIO5)
VCC: Connect the VCC of the DHT sensor to the 3.3V pin of the NodeMCU.
GND: Connect the GND of the DHT sensor to the GND of the NodeMCU.
DATA: Connect the DATA pin of the DHT sensor to D1 (GPIO5) on the NodeMCU for data communication.

Make sure the sensor is powered by 3.3V to avoid any issues, as the NodeMCU operates at 3.3V, and the DHT sensor supports 3.3V logic.

Code Explanation
> Initialization:
The dht.setup(D1) function sets the D1 (GPIO5) pin for data communication with the DHT sensor.
The serial communication is initialized with Serial.begin(9600), allowing us to print the sensor's status and readings.

> Sampling:
The delay(dht.getMinimumSamplingPeriod()) adds a delay equal to the minimum sampling period required for the DHT sensor to take a reading.
The humidity and temperature values are retrieved using dht.getHumidity() and dht.getTemperature() respectively.

> Displaying Data:
The dht.getStatusString() function provides the status of the sensor communication, which helps in troubleshooting if there's any issue with the data collection.
The humidity and temperature values are printed in a tabular format to the Serial Monitor, with the temperature also converted to Fahrenheit using the dht.toFahrenheit() function.

> Output:
The output on the Serial Monitor will display the sensor's status, humidity percentage, and both the temperature in Celsius and Fahrenheit.


Conclusion
This project demonstrates how to interface the DHT temperature and humidity sensor with the NodeMCU (ESP8266) to read and display temperature and humidity values.
The data is printed to the Serial Monitor, and the temperature is shown in both Celsius and Fahrenheit. This project is useful for creating environmental monitoring systems,
smart weather stations, or any application that requires temperature and humidity data.

The NodeMCU, together with the DHT sensor, provides an easy-to-use solution for integrating IoT projects with temperature and humidity data logging, 
which can be extended with web-based dashboards or automated control systems.
