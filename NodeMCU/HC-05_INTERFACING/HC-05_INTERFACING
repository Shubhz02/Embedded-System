Introduction
This project demonstrates how to control an LED connected to the NodeMCU (ESP8266) using Serial communication.
The program reads commands sent via Bluetooth or Serial Monitor and turns the LED on or off based on the received input. This is useful for remote control projects,
where the NodeMCU can interact with a mobile app or computer to trigger actions like turning an LED on/off.

Working Principle
The code utilizes Serial communication to receive data from an external device such as a Bluetooth module or the Serial Monitor on your computer. The logic works as follows:

When data is received, it checks if the received character is '1' or '2'.
If '1' is received, the LED connected to D4 (GPIO2) is turned ON.
If '2' is received, the LED is turned OFF.
If any other character is received, the system sends a prompt to select either '1' or '2' for controlling the LED.


Connections
To connect the LED to the NodeMCU, use the following pin configuration:
Component	NodeMCU Pin
LED Anode (longer leg)         	D4 (GPIO2)
LED Cathode (shorter leg)	      GND
Resistor	                      In series with the LED (typically 220Ω)


D4 (GPIO2) is used to control the LED.
A 220Ω resistor is recommended to limit the current flowing through the LED and protect it.


Code Explanation
> Initialization:
The pinMode(LED, OUTPUT) sets D4 as an output pin to control the LED.
Serial.begin(9600) initializes Serial communication with a baud rate of 9600, allowing data exchange between the NodeMCU and a connected device (e.g., a computer or Bluetooth module).

> Receiving Data:
The Serial.available() function checks if there is any data available in the Serial buffer.
If data is available, it reads the character using Serial.read(), which is stored in the variable data_received.

> Control Logic:
If the received character is '1', the LED is turned ON by setting digitalWrite(LED, HIGH), and a confirmation message is sent to the Serial Monitor: "LED turned ON".
If the received character is '2', the LED is turned OFF by setting digitalWrite(LED, LOW), and a confirmation message is sent to the Serial Monitor: "LED turned OFF".
If any other character is received, the system prompts the user with "Select either 1 or 2" to instruct them on how to control the LED.

> Serial Output:
The program uses Serial.write() to send feedback to the Serial Monitor. It tells whether the LED is ON or OFF or asks for valid input.


Conclusion
This simple project demonstrates how to use Serial communication to remotely control an LED connected to a NodeMCU (ESP8266). 
The system listens for incoming commands (either '1' or '2') and takes actions based on those commands. The Serial Monitor provides feedback, 
making it easier to track the current state of the LED.

This technique can be easily adapted for other projects where you need to control components based on serial input, such as controlling motors, sensors, 
or triggering specific actions on your device.
