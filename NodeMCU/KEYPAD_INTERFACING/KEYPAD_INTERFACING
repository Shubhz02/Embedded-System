Introduction
This project demonstrates how to interface a 4x4 Keypad with the NodeMCU (ESP8266) and read keypresses. The Keypad sends a character to the NodeMCU whenever a button is pressed, 
and the character is then printed to the Serial Monitor. This project is useful for user input applications, such as entering PIN codes, controlling devices, or 
interacting with a microcontroller-based system.

Working Principle
A 4x4 Keypad consists of 16 buttons arranged in a grid of 4 rows and 4 columns. Each button is connected to a specific row and column pin on the NodeMCU (ESP8266). 
By scanning the rows and columns, the Keypad library detects which button has been pressed and returns the corresponding character.

Keypad Scanning Process:
The program defines a 2D array hexaKeys[ROWS][COLS] to represent the buttons' characters (0-9, A-F).
When a key is pressed, the Keypad library scans the rows and columns and detects the button corresponding to the ROW and COLUMN where the key is located.
The character of the pressed key is then printed to the Serial Monitor.


Connections
To connect the 4x4 Keypad to the NodeMCU (ESP8266), the following pin configuration is used:
Keypad Pin	NodeMCU Pin
Row 1	D0
Row 2	D1
Row 3	D2
Row 4	D3
Column 1	D5
Column 2	D6
Column 3	D7
Column 4	D9
The Keypad uses the digital pins on the NodeMCU for both rows and columns.
Ensure that each row pin is connected to a row line on the keypad, and each column pin is connected to a column line.


Code Explanation
> Pin Configuration:
The rows and columns of the 4x4 Keypad are connected to the NodeMCU (ESP8266) pins, defined in the arrays rowPins and colPins.

> Keypad Mapping:
The hexaKeys array contains the characters mapped to each key on the 4x4 Keypad. The keys are arranged from '0' to 'F', as per the hexadecimal keypad format.

> Keypad Initialization:
Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS); initializes the Keypad object using the row and column pin mappings and the keymap for the keypad.

> Reading Input:
Inside the loop(), customKeypad.getKey() is used to detect if a key is pressed. If a key is pressed, the character corresponding to that key is stored in the customKey variable.
If a valid key is pressed (if (customKey)), the character is printed to the Serial Monitor using Serial.println(customKey);.


Conclusion
This project allows you to interface a 4x4 Keypad with the NodeMCU (ESP8266), enabling it to read button presses and print the corresponding key to the Serial Monitor. 
It demonstrates how to handle user input in embedded systems, and it can be extended for applications such as PIN authentication, device control, or other keypad-based interfaces.

The Keypad library makes it easy to interface with the keypad by abstracting the complexities of scanning the matrix and providing a straightforward way to detect and 
handle key presses.
