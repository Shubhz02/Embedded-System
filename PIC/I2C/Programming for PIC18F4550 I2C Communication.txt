*Programming for PIC18F4550 I2C Communication*

*Initialization*

Configure PORTB.0 and PORTB.1 as an input pin.
Also, configure the SSPSTAT and SSPCON2 register.
Enable I2C by setting SSPEN bit in the SSPCON1 register. Also select master/slave mode.
Set frequency of I2C communication by loading value in the SSPADD register in master mode.


*I2C_Master*

void I2C_Init()
{
    TRISB0=1;		/* Set up I2C lines by setting as input */
    TRISB1=1;
    SSPSTAT=0x80;		/* Slew rate disabled, other bits are cleared */
    SSPCON1=0x28;	/* Enable SSP port for I2C Master mode,
			clock = FOSC / (4 * (SSPADD+1))*/ 
    SSPCON2=0;
    SSPADD=Bit_rate;	/* Clock 100 kHz */  
    SSPIE=1;		/* Enable SSPIF interrupt */
    SSPIF=0;
}
 

*Start I2C communication*

Send start pulse to the slave device by setting a bit in SEN in the SSPCON2 register.
Wait for SEN bit to clear.
Also, check S bit in SSPSTAT register which indicates the start bit is detected or not.
And then send the device slave address along with write operation and check for acknowledgment signal.
char I2C_Start(char slave_write_address)
{   
    SSPCON2bits.SEN=1;		/* Send start pulse */
    while(SSPCON2bits.SEN);	/* Wait for completion of start pulse */
    SSPIF=0;
    if(!SSPSTATbits.S)		/* Check whether START detected last */
    return 0;			/* Return 0 to indicate start failed */   
    return (I2C_Write(slave_write_address));	/* Write slave device address
						with write to communicate */
}
 

*Write/Transmit Data*

We have to monitor BF flag or SSPIF which will set when transmission/reception of a byte is complete.

I2C Bus Ready
Check the BF flag and R/W bit in the SSPSTAT register for finding the I2C bus is ready or not.

 void I2C_Ready()
{
    while(BCLIF);	/* Wait if bit collision interrupt flag is set*/

    /* Wait for Buffer full and read write flag*/
    while(SSPSTATbits.BF || (SSPSTATbits.R_nW));
    SSPIF=0;  		/* Clear SSPIF interrupt flag*/
}
 

Also SSPIF flag can be used to poll the complete byte transmit/receive status. Also, it is necessary to clear the SSPIF interrupt flag through software.

void I2C_Ready()
{
    while(!SSPIF);	/* Wait for operation complete */
    SSPIF=0;		/* Clear SSPIF interrupt flag*/
}
 

Copy/write data to the SSPBUF register for transmission and wait for the completion of the transmission.

char I2C_Write(unsigned char data)
{
      SSPBUF=data;	/* Write data to SSPBUF*/
      I2C_Ready();
      if (ACKSTAT)	/* Check for acknowledge bit*/
        return 1;
      else
        return 2;
}
 

After write if we want to Stop I2C communication,

Set the PEN bit in SSPCON2 register and wait for the PEN bit to clear.

Also, check P bit in the SSPSTAT register which indicates the stop bit is detected.


char I2C_Stop()
{
    I2C_Ready();
    PEN=1;		/* Stop communication*/
    while(PEN);		/* Wait for end of stop pulse*/
    SSPIF = 0;
    if (!SSPSTATbits.P) /* Check whether STOP is detected last */
       return 0;	/* If not return 0 to indicate start failed*/
}
 

*Read/Receive Data*

Enable receive mode by setting bit RCEN in SSPCON2.
Then wait for the Buffer flag to set which is set when a complete byte is received.
Read the buffer immediately.
After reading one byte, send an acknowledge signal if we want to read the next data else send negative acknowledge which tells we donâ€™t want to read the next data.
To do this, ACKDT =1 or 0 and ACKEN should be enabled.
/* Read data from location and send ack or nack depending upon parameter*/

char I2C_Read(char flag)
{
        int buffer=0;
        RCEN=1;			/* Enable receive */

	/* Wait for buffer full flag which when complete byte received */
        while(!SSPSTATbits.BF);
        buffer=SSPBUF;		/* Copy SSPBUF to buffer */

	/* Send acknowledgment or negative acknowledgment after read to 
	continue or stop reading */
        if(flag==0)
            I2C_Ack();
        else
            I2C_Nack();
        I2C_Ready();
        return(buffer);
}
 

*Acknowledgment*

void I2C_Ack()
{
    ACKDT=0;		/* Acknowledge data 1:NACK,0:ACK */
    ACKEN=1;		/* Enable ACK to send */
    while(ACKEN);
 }
 

*Negative Acknowledgement*

void I2C_Nack()
{
    ACKDT=1;		/* Acknowledge data 1:NACK,0:ACK */
    ACKEN=1;		/* Enable ACK to send */
    while(ACKEN);
}